package com.littlecloud.rptconsolidation.threads.executors.impls;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.jboss.logging.Logger;

import com.littlecloud.rptconsolidation.eos.ConsolidateJob;
import com.littlecloud.rptconsolidation.eos.SystemParamsBundles;
import com.littlecloud.rptconsolidation.threads.consumers.impls.ConsolidateJobsConsumerThreadImpl;
import com.littlecloud.rptconsolidation.threads.executors.RptConsolidationExecutor;
import com.littlecloud.systems.BundlesLoader;
import com.littlecloud.systems.impls.BundlesLoaderSystemBundlesImpl;

public class ConsolidateJobsConsumerExecutorImpl implements Runnable, RptConsolidationExecutor<ConsolidateJob> {
	private static final Logger log = Logger.getLogger(ConsolidateJobsConsumerExecutorImpl.class);
	protected static ThreadPoolExecutor executor;
	protected boolean runningEnabled = true;
	protected static BlockingQueue<ConsolidateJob> q;
	protected SystemParamsBundles bundlesDto;

	
	private void init(){
		try{
			BundlesLoader <SystemParamsBundles> bundlesFactory = new BundlesLoaderSystemBundlesImpl();
			bundlesDto = bundlesFactory.getBundleDto();
		} catch (Exception e){
			log.error("ConsolidateJobsExecutor.init() - Exception: ", e);
		}
	}
	
	public ThreadPoolExecutor getExecutor() {
		return executor;
	}
	
	public ConsolidateJobsConsumerExecutorImpl(BlockingQueue<ConsolidateJob> q){
		init();
		ConsolidateJobsConsumerExecutorImpl.q = q;
		if (executor == null){
			executor = new ThreadPoolExecutor(bundlesDto.getMaxThreadPool(), bundlesDto.getMaxThreadPool(),
                    0L, TimeUnit.MILLISECONDS,
                    new LinkedBlockingQueue<Runnable>());
		}

	}
	public BlockingQueue<ConsolidateJob> getQueue(){
		return ConsolidateJobsConsumerExecutorImpl.q;
	}
	
	public boolean enqueue(ConsolidateJob consolidateJob){
		boolean isAdded= false;
		try{
			ConsolidateJobsConsumerExecutorImpl.q.put(consolidateJob);
		} catch (Exception e){
			log.error("ConsolidateJobsExecutor.isEnqueue() - ", e );
		}
		return isAdded;
	}
	
	protected void execute(ConsolidateJobsConsumerThreadImpl consumerThread){
		try{
			executor.execute(consumerThread);
		} catch (Exception e){
			log.error("ConsolidateJobsExecutor.execute() - ", e );
		}
	}
	
	public boolean getRunningEnabled() {
		return runningEnabled;
	}

	public void setRunningEnabled(boolean runningEnabled) {
		this.runningEnabled = runningEnabled;
	}
	public void shutdown(){
		if (executor != null){
			if (executor != null){
				if (!executor.isShutdown()) {
					executor.shutdown();
					try{
						if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
							if (log.isDebugEnabled()){
								log.debugf("ConsolidateJobsExecutor.shutdown() - Some are still running after 1sec");
							}
					        executor.shutdownNow();
					        if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
					        	if (log.isDebugEnabled()){
					        		log.debugf("ConsolidateJobsExecutor.shutdown() - Some did not end and exit anyway");
					        	}
					        }
					    }					
					} catch(InterruptedException e){
						executor.shutdownNow();
						log.error("ConsolidateJobsExecutor.shutdown() - Interrupted and exit anyway", e );
					}
				}
				executor = null;
			}
		}
	}
	
	@Override
	public void run() {
		try{
			while (runningEnabled){
				if (ConsolidateJobsConsumerExecutorImpl.q != null && ConsolidateJobsConsumerExecutorImpl.q.size() > 0){
					ConsolidateJobsConsumerThreadImpl consumerThread = new ConsolidateJobsConsumerThreadImpl(ConsolidateJobsConsumerExecutorImpl.q);
					execute(consumerThread);
				}
				if (log.isDebugEnabled()){
					log.debugf("ConsolidateJobsExecutor.run(), ConsolidateJobsExecutor.q: %s", ConsolidateJobsConsumerExecutorImpl.q);					
				}
				Thread.sleep(bundlesDto.getThreadSleep());
			}
		} catch (Exception e){
			log.error("ConsolidateJobsExecutor.run() - ", e );
		}
	}

}
