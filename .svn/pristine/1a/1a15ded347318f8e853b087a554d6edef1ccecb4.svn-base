package com.littlecloud.rptconsolidation.services.impls;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.littlecloud.control.dao.NetworksDAO;
import com.littlecloud.control.entity.Networks;
import com.littlecloud.rptconsolidation.dtos.ConsolidateJobCommonParamsDto;
import com.littlecloud.rptconsolidation.eos.ConsolidateJob;
import com.littlecloud.rptconsolidation.helpers.ConsolidateJobsWsHelper;
import com.littlecloud.rptconsolidation.services.ConsolidateJobsChainMemberMgr;
import com.littlecloud.services.CaptivePortalUserDailyUsagesMgr;
import com.littlecloud.utils.CalendarUtils;
import com.littlecloud.utils.CommonUtils;

public class CaptivePortalUserDailyUsagesChainMemberMgrImpl implements ConsolidateJobsChainMemberMgr {
	private static final Logger log = LoggerFactory.getLogger(CaptivePortalUserDailyUsagesChainMemberMgrImpl.class);
	private ConsolidateJobsChainMemberMgr consolidateJobsChainMgr;
	@Override
	public void setNextChain(ConsolidateJobsChainMemberMgr nextChain) {
		this.consolidateJobsChainMgr=nextChain;
	}
	

	@Override
	public void responseJobOrPass(ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto) {
		try{
			if (consolidateJobCommonParamsDto != null){
				if (consolidateJobCommonParamsDto.getJobName() != null && 
						consolidateJobCommonParamsDto.getJobName().equals(ConsolidateJob.JOB_NAME_CAPTIVE_PORTAL_DAILY_USER_USAGES_CONSOLIDATION)){
					boolean areParamsValided = areParamsValided(consolidateJobCommonParamsDto);
					if (!areParamsValided){
						log.warn("CaptivePortalUserDailyUsagesChainMemberMgrImpl.responseJobOrPass() - areParamsValided:" + areParamsValided);
						return;
					}
					String dateFrom = consolidateJobCommonParamsDto.getDateFrom();
					String dateTo = consolidateJobCommonParamsDto.getDateTo();
					String orgId = consolidateJobCommonParamsDto.getOrgId();
					String server = consolidateJobCommonParamsDto.getServer();
					String networkId = consolidateJobCommonParamsDto.getNetworkId();
					
					Calendar calFrom = ConsolidateJobsWsHelper.convertParamDateString2Calendar(dateFrom);
					CalendarUtils.trimCalendar2Minimum(calFrom);
					Calendar calTo = ConsolidateJobsWsHelper.convertParamDateString2Calendar(dateTo);
					CalendarUtils.trimCalendar2Maximum(calTo);
					long tstart = System.currentTimeMillis();
					

					String jobName = ConsolidateJob.JOB_NAME_CAPTIVE_PORTAL_DAILY_USER_USAGES_CONSOLIDATION;
					ConsolidateJobsWsHelper consolidateJobsWsHelper = new ConsolidateJobsWsHelper(orgId, jobName, server);
					consolidateJobsWsHelper.markProcessStartTime();
					
					int noOfRecordsDone = 0;
					CaptivePortalUserDailyUsagesMgr captivePortalUserDailyUsagesMgr = new CaptivePortalUserDailyUsagesMgr(orgId);
					if (networkId == null){
						captivePortalUserDailyUsagesMgr.doCaptivePortalUserDailyUsagesConsolidation(calFrom, calTo);
					} else {
						NetworksDAO networksDao = new NetworksDAO(orgId);
						if (CommonUtils.isInteger(networkId)){
							Integer networkIdInt = new Integer(networkId);
							Networks network= networksDao.getNetworksById(networkIdInt);
							if (network != null){
								List<Networks> networkList = new ArrayList<Networks>();
								networkList.add(network);
								noOfRecordsDone = captivePortalUserDailyUsagesMgr.doCaptivePortalUserDailyUsagesConsolidation(calFrom, calTo, networkList);
							}
						}
					}
					long tused = (System.currentTimeMillis() - tstart) / 1000;
					StringBuilder sb = new StringBuilder(); 
					sb.append("CaptivePortalUserDailyUsagesChainMemberMgrImpl - no of records:" + noOfRecordsDone + ", ");
					sb.append("time: " + tused);
					consolidateJobCommonParamsDto.setResultString(sb.toString());
					
					consolidateJobsWsHelper.markProcessEndTime();
					consolidateJobsWsHelper.markNoOfRecordsProcessed(noOfRecordsDone);
					consolidateJobsWsHelper.saveConsolidateJob();
				} else {
					consolidateJobsChainMgr.responseJobOrPass(consolidateJobCommonParamsDto);
				}
			}
		} catch (Exception e){
			log.error("CaptivePortalUserDailyUsagesChainMemberMgrImpl.responseJobOrPass() - Exception: ", e);
		}

	}
	private boolean areParamsValided(ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto){
		boolean areValided = true;
		if (consolidateJobCommonParamsDto.getDateFrom() == null || consolidateJobCommonParamsDto.getDateFrom().isEmpty() ||
				consolidateJobCommonParamsDto.getDateTo() == null || consolidateJobCommonParamsDto.getDateTo().isEmpty() ||
				consolidateJobCommonParamsDto.getJobName() == null || consolidateJobCommonParamsDto.getJobName().isEmpty() ||
				consolidateJobCommonParamsDto.getOrgId() == null || consolidateJobCommonParamsDto.getOrgId().isEmpty() ||
				consolidateJobCommonParamsDto.getServer() == null || consolidateJobCommonParamsDto.getServer().isEmpty()){
			areValided = false;
		}
		return areValided;
	}

}
