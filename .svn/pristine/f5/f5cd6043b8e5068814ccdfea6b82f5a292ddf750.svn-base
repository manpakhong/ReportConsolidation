package com.littlecloud.rptconsolidation.webservices;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.littlecloud.control.dao.NetworksDAO;
import com.littlecloud.control.entity.Networks;
import com.littlecloud.rptconsolidation.dtos.ConsolidateJobCommonParamsDto;
import com.littlecloud.rptconsolidation.eos.ConsolidateJob;
import com.littlecloud.rptconsolidation.helpers.ConsolidateJobsWsHelper;
import com.littlecloud.rptconsolidation.services.ConsolidateJobsChainMgr;
import com.littlecloud.rptconsolidation.services.ConsolidateJobsMgr;
import com.littlecloud.rptconsolidation.services.impls.ConsolidateJobsChainMgrImpl;
import com.littlecloud.rptconsolidation.services.impls.ConsolidateJobsMgrImpl;
import com.littlecloud.rptconsolidation.utils.SystemUtils;
import com.littlecloud.services.CaptivePortalDailyUsagesMgr;
import com.littlecloud.services.CaptivePortalUserDailyUsagesMgr;
import com.littlecloud.services.DeviceDpiDailyUsagesMgr;
import com.littlecloud.services.DeviceDpiMonthlyUsagesMgr;
import com.littlecloud.services.DeviceMonthlyUsagesMgr;
import com.littlecloud.services.DeviceSsidDailyUsagesMgr;
import com.littlecloud.utils.CalendarUtils;
import com.littlecloud.utils.CommonUtils;
//http://localhost:8080/rptconsolidation/rest/consolidateJobWs/getAllConsolidateJob
@Path("/consolidateJobWs")
public class ConsolidateJobsWs {
	private static final Logger log = LoggerFactory.getLogger(ConsolidateJobsWs.class);
	private String server;
	
	public ConsolidateJobsWs(){
		init();
	}
	private void init(){
		try{
			SystemUtils.loadLittleCloudProperties();
			// TODO
			server = "added later";
		} catch (Exception e){
			log.error("ConsolidateJobsWs.init() - Exception: ", e);
		}
	}
	
	@GET
	@Path("/getAllConsolidateJob")
	@Produces("text/plain")
	public String getAllConsolidateJob(){ 
		String returnString = "";
		try{
			
			ConsolidateJobsMgr consolidateJobMgr = new ConsolidateJobsMgrImpl();
			List<ConsolidateJob> consolidateJobList = consolidateJobMgr.getAllConsolidateJobList();
			StringBuilder sb = new StringBuilder();
			for (ConsolidateJob consolidateJob: consolidateJobList){
				sb.append(consolidateJob + "\n");
			}
			returnString = sb.toString();
		}catch (Exception e){
			log.error("ConsolidateJobsWs.getAllConsolidateJob() - Exception: ", e);
		}
		return returnString;
	}
	
	
	@GET
	@Path("/doDeviceDailyUsagesConsolidation")
	@Produces("text/plain")
	public String doDeviceDailyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId,
			@QueryParam("networkId") String networkId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_DEVICE_DAILY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doDeviceDailyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doDeviceDailyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}
	@GET
	@Path("/doDeviceMonthlyUsagesConsolidation")
	@Produces("text/plain")
	public String doDeviceMonthlyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){

				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
//				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_DEVICE_MONTHLY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
			} else {
				log.warn("ConsolidateJobsWs.doDeviceMonthlyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doDeviceMonthlyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}
	@GET
	@Path("/doDeviceDpiDailyUsagesConsolidation")
	@Produces("text/plain")
	public String doDeviceDpiDailyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId,
			@QueryParam("networkId") String networkId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_DEVICE_DPI_DAILY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doDeviceDpiDailyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doDeviceDpiDailyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}
	@GET
	@Path("/doDeviceDpiMonthlyUsagesConsolidation")
	@Produces("text/plain")
	public String doDeviceDpiMonthlyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
//				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_DEVICE_DPI_MONTHLY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doDeviceDpiMonthlyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doDeviceDpiMonthlyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}	
	@GET
	@Path("/doDeviceSsidDailyUsagesConsolidation")
	@Produces("text/plain")
	public String doDeviceSsidDailyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId,
			@QueryParam("networkId") String networkId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
//				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_DEVICE_SSID_DAILY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doDeviceSsidDailyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doDeviceSsidDailyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}
	@GET
	@Path("/doCaptivePortalDailyUsagesConsolidation")
	@Produces("text/plain")
	public String doCaptivePortalDailyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId,
			@QueryParam("networkId") String networkId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_CAPTIVE_PORTAL_DAILY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doCaptivePortalDailyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doCaptivePortalDailyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}
	@GET
	@Path("/doCaptivePortalUserDailyUsagesConsolidation")
	@Produces("text/plain")
	public String doCaptivePortalUserDailyUsagesConsolidation(
			@QueryParam("dateFrom") String dateFrom,
			@QueryParam("dateTo") String dateTo,
			@QueryParam("orgId") String orgId,
			@QueryParam("networkId") String networkId
			){ 
		StringBuilder sb = new StringBuilder();
		try{
			if (dateFrom != null && dateTo != null && orgId != null){
				ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto = new ConsolidateJobCommonParamsDto();
				
				consolidateJobCommonParamsDto.setDateFrom(dateFrom);
				consolidateJobCommonParamsDto.setDateTo(dateTo);
				consolidateJobCommonParamsDto.setOrgId(orgId);
				consolidateJobCommonParamsDto.setNetworkId(networkId);
				consolidateJobCommonParamsDto.setJobName(ConsolidateJob.JOB_NAME_CAPTIVE_PORTAL_DAILY_USAGES_CONSOLIDATION);
				consolidateJobCommonParamsDto.setServer(server);
				ConsolidateJobsChainMgr consolidateJobsChainMgr = new ConsolidateJobsChainMgrImpl();
				String rtnString = consolidateJobsChainMgr.passJob(consolidateJobCommonParamsDto);
				sb.append(rtnString);
				
			} else {
				log.warn("ConsolidateJobsWs.doCaptivePortalUserDailyUsagesConsolidation() - insufficient params: dateFrom:" + dateFrom + ",dateTo:" + dateTo + ",orgId:" + orgId);
			}
		}catch (Exception e){
			log.error("ConsolidateJobsWs.doCaptivePortalUserDailyUsagesConsolidation() - Exception: ", e);
		}
		return sb.toString();
	}	
} // end class
