package com.littlecloud.rptconsolidation.services.impls;

import java.util.Calendar;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.littlecloud.rptconsolidation.dtos.ConsolidateJobCommonParamsDto;
import com.littlecloud.rptconsolidation.eos.ConsolidateJob;
import com.littlecloud.rptconsolidation.helpers.ConsolidateJobsWsHelper;
import com.littlecloud.rptconsolidation.services.ConsolidateJobsChainMemberMgr;
import com.littlecloud.services.DeviceMonthlyUsagesMgr;
import com.littlecloud.utils.CalendarUtils;

public class DeviceMonthlyUsagesChainMemberMgrImpl implements ConsolidateJobsChainMemberMgr{
	private static final Logger log = LoggerFactory.getLogger(DeviceMonthlyUsagesChainMemberMgrImpl.class);
	private ConsolidateJobsChainMemberMgr consolidateJobsChainMgr;
	@Override
	public void setNextChain(ConsolidateJobsChainMemberMgr nextChain) {
		this.consolidateJobsChainMgr=nextChain;
	}

	@Override
	public void responseJobOrPass(ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto) {
		try{
			if (consolidateJobCommonParamsDto != null){
				if (consolidateJobCommonParamsDto.getJobName() != null && 
						consolidateJobCommonParamsDto.getJobName().equals(ConsolidateJob.JOB_NAME_DEVICE_MONTHLY_USAGES_CONSOLIDATION)){
					boolean areParamsValided = areParamsValided(consolidateJobCommonParamsDto);
					if (!areParamsValided){
						log.warn("DeviceMonthlyUsagesChainMemberMgrImpl.responseJobOrPass() - areParamsValided:" + areParamsValided);
						return;
					}
					
					Calendar calFrom = consolidateJobCommonParamsDto.getCalFrom();
					CalendarUtils.trimCalendar2Minimum(calFrom);
					Calendar calTo = consolidateJobCommonParamsDto.getCalTo();
					CalendarUtils.trimCalendar2Maximum(calTo);
					
					String server = consolidateJobCommonParamsDto.getServer();
					String orgId = consolidateJobCommonParamsDto.getOrgId();
					
					
					String jobName = consolidateJobCommonParamsDto.getJobName();
					ConsolidateJobsWsHelper consolidateJobsWsHelper = new ConsolidateJobsWsHelper(orgId, jobName, server);
					consolidateJobsWsHelper.markProcessStartTime();
					
					long tstart = System.currentTimeMillis();
					int noOfRecordsDone = 0;
					DeviceMonthlyUsagesMgr deviceMonthlyUsagesMgr = new  DeviceMonthlyUsagesMgr(orgId);
					noOfRecordsDone = deviceMonthlyUsagesMgr.doDeviceMonthlyUsagesConsolidation(calFrom, calTo);
					
					long tused = (System.currentTimeMillis() - tstart) / 1000;
					StringBuilder sb = new StringBuilder();
					sb.append("DeviceMonthlyUsagesChainMemberMgrImpl - no of records:" + noOfRecordsDone + ", ");
					sb.append("time: " + tused);
					consolidateJobCommonParamsDto.setResultString(sb.toString());
					
					consolidateJobsWsHelper.markProcessEndTime();
					consolidateJobsWsHelper.markNoOfRecordsProcessed(noOfRecordsDone);
					consolidateJobsWsHelper.saveConsolidateJob();
				} else {
					consolidateJobsChainMgr.responseJobOrPass(consolidateJobCommonParamsDto);
				}
			}
		} catch (Exception e){
			log.error("DeviceMonthlyUsagesChainMemberMgrImpl.responseJobOrPass() - Exception: ", e);
		}
	}
	private boolean areParamsValided(ConsolidateJobCommonParamsDto consolidateJobCommonParamsDto){
		boolean areValided = true;
		if (consolidateJobCommonParamsDto.getCalFrom() == null ||
				consolidateJobCommonParamsDto.getCalTo() == null || 
				consolidateJobCommonParamsDto.getJobName() == null || consolidateJobCommonParamsDto.getJobName().isEmpty() ||
				consolidateJobCommonParamsDto.getOrgId() == null || consolidateJobCommonParamsDto.getOrgId().isEmpty() ||
				consolidateJobCommonParamsDto.getServer() == null || consolidateJobCommonParamsDto.getServer().isEmpty()){
			areValided = false;
		}
		return areValided;
	}
}
